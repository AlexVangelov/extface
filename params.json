{"name":"Extfaceâ™¥","tagline":"External Interfaces for Cloud-Based Applications (Rails 4)","body":"Extface<sup>&hearts;</sup>\r\n========\r\n\r\nExternal Interfaces for Cloud-Based Applications (Rails 4)\r\n\r\nUsing Cash Registers, Fiscal and POS printers without physical connection between the device, application server and the end user. \r\nCan also be used for remotely reading CDR logs from PBX systems and actually supports data exchange with all low-speed devices having serial, parallel or USB* interface.\r\nExtface allows multiple jobs to be executed in queue, and privides job progress monitor through Server-Sent Events.\r\n\r\n## It's just the beginning\r\n\r\n    gem 'extface'\r\n    \r\n    bundle install\r\n    \r\n    bundle exec rake extface:install:migrations\r\n    \r\n    bundle exec rake db:migrate\r\n    \r\nCommunication with devices is realized through Redis server, so it is required. Read more down.\r\n    \r\nTo add external interfaces to `Shop` model, use mapper `extface_for` in `config/routes.rb`, example:\r\n\r\n    resources :shops do \r\n      extface_for :shop\r\n    end\r\n  \r\nAdd `has_extface_devices` in your `/app/models/shop.rb`\r\n\r\nExtface engine will be visible at `link_to 'Extface', shop_extface_path(@shop)`\r\n\r\nCreate a device with driver `Generic Pos Print`.\r\nCopy the `Pull URL`, visible on device's show page.\r\n\r\nTo simulate client side of the system you can use bash script (replace the URL with your one):\r\n\r\n    while true; do RESULT=$(curl -u extface:extface -c extface -b extface -s http://localhost:3000/shops/1/shop_extface/bb6ac841cf239ab89b967352c40e4b39); if [ -z \"$RESULT\" ]; then sleep 5; else echo -e \"$RESULT\"; sleep 1; fi done\r\n  \r\nHit The `Print Test Page` and you will see result in you console.\r\n\r\nOutput can be forwarded to real device by adding ` > /dev/ttyS0` at the end example script.\r\n\r\n## Usage\r\n\r\n    job = extface_device.session do |s|\r\n      s.print \"some data\\r\\n\"\r\n      10.times do |i|\r\n        s.print \"Line #{i}\\r\\n\"\r\n      end\r\n    end\r\n\r\nThe result of this block returns immediately, and the job is executed in background.\r\nJob execution can be monitored with EventStream (SSE) at `extface.job_url(job)`\r\n\r\nExtface is happy with Unicorn workers, even recommended it!\r\n\r\nThe project is still in workflow development stage.\r\nIt is focused on the following tasks:\r\n\r\n  Easy and clear integration.\r\n  Reliability.\r\n  Low consumption of server and client resources.\r\n  Maintenance of a large number of protocols and devices.\r\n\r\n\r\n## Rails engines\r\n\r\nExtface is intended to work properly with multiple instances in rails engines. Possible routing mappers:\r\n\r\n    resources :shops do\r\n      extface_for :shop, interfaceable_type: 'Market::Shop', controller_include: 'Market::ShopController'\r\n    end\r\n    \r\nWhere `Market::ShopController` is Module that includes application before actions, like authentication, set locale and what ever.\r\n\r\n    scope ':shop_uuid' do\r\n      extface_for :shop, interfaceable_type: 'Market::Shop', interfaceable_param: :shop_uuid, controller_include: 'Market::ShopController'\r\n    end\r\n    \r\nThis will mount extface at `market/:shop_uuid/shop_extface` and will try to find shop instance by `Market::Shop.find_by(uuid: params[:shop_uuid])`\r\n\r\n## Redis connection string\r\n\r\nCreate `config/initializers/extface.rb`:\r\n\r\n    Extface.setup do |config|\r\n      #config.redis_connection_string = \"redis://username:password@my.host:6389\"\r\n      #config.device_timeout = 10 #seconds to wait before cancel the job if there is no activity on the device\r\n    end\r\n\r\n\r\n## Views & Layout\r\n\r\nViews as designed for twitter bootstrap CSS. Engine layout can be replaced by creating `app/views/layouts/extface/application.html.erb` in your engine/main_app.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}